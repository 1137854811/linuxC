#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include<dirent.h>

#define SERVPORT 8888 
#define MAXDATASIZE 2000
int file_count=0;
int link_count=0;
int Dir_count=0;
int deep = 0;
int flag=0;
int i = 0;
int j = 0;
char buf[MAXDATASIZE];
char buf1[MAXDATASIZE];
char readCount[MAXDATASIZE];
void readFileList(char *Path);
void readFileCount(char *Path);

int main(int argc,char *argv[]){ 
	 
	char sss[MAXDATASIZE];
	char sum[2000];
	memset(sss,0,MAXDATASIZE);
	memset(sum,0,1000);
	readFileList(argv[1]);
	readFileCount(argv[1]);
	sprintf(sss,"[%s] 总文件数量为:%d\t总符号链接文件数量为:%d\t总目录数量为:%d\n",argv[1],file_count,link_count,Dir_count);
	strcat(sum,buf);
	strcat(sum,buf1);
	strcat(sum,readCount);
	strcat(sum,"\n");
	strcat(sum,sss);
	int sockfd,sendbytes=0; 
	
	struct sockaddr_in serv_addr; 
	if((sockfd=socket(AF_INET,SOCK_STREAM,0))== -1){ 
		perror("socket"); 
		exit(1); 
	} 
	bzero(&serv_addr,sizeof(serv_addr));
	serv_addr.sin_family=AF_INET; 
	serv_addr.sin_port=htons(SERVPORT); 
	serv_addr.sin_addr.s_addr=inet_addr("127.0.0.1");
	if(connect(sockfd,(struct sockaddr *)&serv_addr,sizeof(struct sockaddr))== -1){ 
		perror("connect"); 
		exit(1); 
	}
	while(1)  
  	{  
		if((sendbytes=write(sockfd,sum,MAXDATASIZE))== -1){ 
		perror("send"); 
		exit(1); 
		}
		break; 
	}	
	close(sockfd);  
	return 0;
} 
void readFileList(char *Path)
{
 	DIR *dir;
   	struct dirent *ptr;
	struct stat statbuf;
	char base[100]; 
	
	memset(base,0,100);
	if(lstat(Path,&statbuf)<0)
		perror("lstat:");
	 if(S_ISDIR(statbuf.st_mode)){
		
		dir=opendir(Path);
		
		while ((ptr=readdir(dir)) != NULL)
   		 {		
			
					flag=1;
					if(strcmp(ptr->d_name,".")==0||strcmp(ptr->d_name,"..")==0)
		 	   		 continue;
				Dir_count++;
				strcpy(base,Path);
				strcat(base,"/");
				strcat(base,ptr->d_name); 
			        readFileList(base);
			}
		
			closedir(dir);
		  } else if(S_ISREG(statbuf.st_mode)){
			file_count++;
			if(flag==1)
				Dir_count--;
			char r[100];
			sprintf(r,"[%s] 下的文件大小为：%ld\n",Path,statbuf.st_size);
			strcat(buf,r);
			printf("[%s] 下的文件大小为：%ld\n",Path,statbuf.st_size);
		 }else if(S_ISLNK(statbuf.st_mode)){
			link_count++;
			char l[100];
			sprintf(l,"[%s] 下的符号链接文件大小为：%ld\n\n",Path,statbuf.st_size);
			strcat(buf1,l);
			printf("[%s] 下的符号链接文件大小为：%ld\n",Path,statbuf.st_size);
		 } 
		
}

void readFileCount(char *Path)
{
    DIR *dir;
    struct dirent *ptr;
    char base[100];
     char path1[50];
        strcpy(path1,Path);
	    deep++;
    if ((dir=opendir(Path)) == NULL)
    {  
	return ;
    }
	  while ((ptr=readdir(dir)) != NULL)
    {
	 
        if(strcmp(ptr->d_name,".")==0||strcmp(ptr->d_name,"..")==0)
              continue;
	else if(ptr->d_type == 8)   
 			i++;
	else if(ptr->d_type == 10) 
			j++;  
        else if(ptr->d_type == 4)  
        {
					char str1[50],str2[50];
					strcpy(str1,Path);
					strcpy(str2,path1);
					if(strcmp(str1,str2)!=0)
					{deep++;}
	    
            strcpy(base,Path);
            strcat(base,"/");
            strcat(base,ptr->d_name); 
	  
            readFileCount(base);
        }
    }	
	char rf[1000];
	memset(rf,0,1000);
	sprintf(rf,"%s路径下的文件个数为:%d,符号链接文件个数为：%d,目录深度为：%d\n",Path,i,j,deep);
	printf("%s路径下的文件个数为:%d,符号链接文件个数为：%d,目录深度为：%d\n",Path,i,j,deep);
	strcat(readCount,rf);
	i=0;j=0;deep--;
    closedir(dir);
  
}